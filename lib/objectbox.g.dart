// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'object_box/models/cached_models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1347176672442829482),
      name: 'CachedMessage',
      lastPropertyId: const obx_int.IdUid(4, 5187625372866693858),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3932100603522055559),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5931316566955592354),
            name: 'channelId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(3, 3275612099763615257)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 301561429331897502),
            name: 'timestamp',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5187625372866693858),
            name: 'data',
            type: 23,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1338841419604106932),
      name: 'CachedChannel',
      lastPropertyId: const obx_int.IdUid(5, 2069599120315650364),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2918638008957580776),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3200740675110518087),
            name: 'channelId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 5043602778363675434)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4781974025676726571),
            name: 'data',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2069599120315650364),
            name: 'timestamp',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 1338841419604106932),
      lastIndexId: const obx_int.IdUid(3, 3275612099763615257),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [9155906770108221775],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4882764362046764998,
        1438466419500383617,
        5026137976143546439,
        2648461489276406311
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CachedMessage: obx_int.EntityDefinition<CachedMessage>(
        model: _entities[0],
        toOneRelations: (CachedMessage object) => [],
        toManyRelations: (CachedMessage object) => {},
        getId: (CachedMessage object) => object.id,
        setId: (CachedMessage object, int id) {
          object.id = id;
        },
        objectToFB: (CachedMessage object, fb.Builder fbb) {
          final channelIdOffset = fbb.writeString(object.channelId);
          final dataOffset = fbb.writeListInt8(object.data);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, channelIdOffset);
          fbb.addInt64(2, object.timestamp);
          fbb.addOffset(3, dataOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final channelIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dataParam = const fb.Uint8ListReader(lazy: false)
              .vTableGet(buffer, rootOffset, 10, Uint8List(0)) as Uint8List;
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = CachedMessage(
              channelIdParam, dataParam, timestampParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    CachedChannel: obx_int.EntityDefinition<CachedChannel>(
        model: _entities[1],
        toOneRelations: (CachedChannel object) => [],
        toManyRelations: (CachedChannel object) => {},
        getId: (CachedChannel object) => object.id,
        setId: (CachedChannel object, int id) {
          object.id = id;
        },
        objectToFB: (CachedChannel object, fb.Builder fbb) {
          final channelIdOffset = fbb.writeString(object.channelId);
          final dataOffset = fbb.writeListInt8(object.data);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, channelIdOffset);
          fbb.addOffset(3, dataOffset);
          fbb.addInt64(4, object.timestamp);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final channelIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dataParam = const fb.Uint8ListReader(lazy: false)
              .vTableGet(buffer, rootOffset, 10, Uint8List(0)) as Uint8List;
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = CachedChannel(
              channelIdParam, dataParam, timestampParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CachedMessage] entity fields to define ObjectBox queries.
class CachedMessage_ {
  /// See [CachedMessage.id].
  static final id =
      obx.QueryIntegerProperty<CachedMessage>(_entities[0].properties[0]);

  /// See [CachedMessage.channelId].
  static final channelId =
      obx.QueryStringProperty<CachedMessage>(_entities[0].properties[1]);

  /// See [CachedMessage.timestamp].
  static final timestamp =
      obx.QueryDateNanoProperty<CachedMessage>(_entities[0].properties[2]);

  /// See [CachedMessage.data].
  static final data =
      obx.QueryByteVectorProperty<CachedMessage>(_entities[0].properties[3]);
}

/// [CachedChannel] entity fields to define ObjectBox queries.
class CachedChannel_ {
  /// See [CachedChannel.id].
  static final id =
      obx.QueryIntegerProperty<CachedChannel>(_entities[1].properties[0]);

  /// See [CachedChannel.channelId].
  static final channelId =
      obx.QueryStringProperty<CachedChannel>(_entities[1].properties[1]);

  /// See [CachedChannel.data].
  static final data =
      obx.QueryByteVectorProperty<CachedChannel>(_entities[1].properties[2]);

  /// See [CachedChannel.timestamp].
  static final timestamp =
      obx.QueryDateNanoProperty<CachedChannel>(_entities[1].properties[3]);
}
